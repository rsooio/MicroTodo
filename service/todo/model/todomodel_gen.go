// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	todoFieldNames          = builder.RawFieldNames(&Todo{})
	todoRows                = strings.Join(todoFieldNames, ",")
	todoRowsExpectAutoSet   = strings.Join(stringx.Remove(todoFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	todoRowsWithPlaceHolder = strings.Join(stringx.Remove(todoFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheTodoIdPrefix    = "cache:todo:id:"
	cacheTodoTitlePrefix = "cache:todo:title:"
)

type (
	todoModel interface {
		Insert(ctx context.Context, data *Todo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Todo, error)
		FindOneByTitle(ctx context.Context, title string) (*Todo, error)
		Update(ctx context.Context, data *Todo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTodoModel struct {
		sqlc.CachedConn
		table string
	}

	Todo struct {
		Id         int64     `db:"id"`
		Title      string    `db:"title"`
		Content    string    `db:"content"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Done       bool      `db:"done"`
		UserId     int64     `db:"user_id"`
	}
)

func newTodoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTodoModel {
	return &defaultTodoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`todo`",
	}
}

func (m *defaultTodoModel) Insert(ctx context.Context, data *Todo) (sql.Result, error) {
	todoIdKey := fmt.Sprintf("%s%v", cacheTodoIdPrefix, data.Id)
	todoTitleKey := fmt.Sprintf("%s%v", cacheTodoTitlePrefix, data.Title)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, todoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.Done, data.UserId)
	}, todoIdKey, todoTitleKey)
	return ret, err
}

func (m *defaultTodoModel) FindOne(ctx context.Context, id int64) (*Todo, error) {
	todoIdKey := fmt.Sprintf("%s%v", cacheTodoIdPrefix, id)
	var resp Todo
	err := m.QueryRowCtx(ctx, &resp, todoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", todoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTodoModel) FindOneByTitle(ctx context.Context, title string) (*Todo, error) {
	todoTitleKey := fmt.Sprintf("%s%v", cacheTodoTitlePrefix, title)
	var resp Todo
	err := m.QueryRowIndexCtx(ctx, &resp, todoTitleKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `title` = ? limit 1", todoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, title); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTodoModel) Update(ctx context.Context, data *Todo) error {
	todoIdKey := fmt.Sprintf("%s%v", cacheTodoIdPrefix, data.Id)
	todoTitleKey := fmt.Sprintf("%s%v", cacheTodoTitlePrefix, data.Title)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, todoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.Done, data.UserId, data.Id)
	}, todoIdKey, todoTitleKey)
	return err
}

func (m *defaultTodoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	todoIdKey := fmt.Sprintf("%s%v", cacheTodoIdPrefix, id)
	todoTitleKey := fmt.Sprintf("%s%v", cacheTodoTitlePrefix, data.Title)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, todoIdKey, todoTitleKey)
	return err
}

func (m *defaultTodoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTodoIdPrefix, primary)
}

func (m *defaultTodoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", todoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTodoModel) tableName() string {
	return m.table
}
